import asyncio
import base64
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from cryptography.fernet import Fernet
from caesar_cipher import encrypt_caesar, decrypt_caesar
from vigenere_cipher import encrypt_vigenere, decrypt_vigenere

TOKEN = ""
bot = Bot(token=TOKEN)
dp = Dispatcher()

fernet_key = Fernet.generate_key()
fernet = Fernet(fernet_key)

user_states = {}
encrypted_messages = {}

def get_encryption_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Base64 —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", callback_data="encrypt_base64")],
        [InlineKeyboardButton(text="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è", callback_data="encrypt_caesar")],
        [InlineKeyboardButton(text="–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞", callback_data="encrypt_vigenere")],
        [InlineKeyboardButton(text="–ë–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="encrypt_binary")],
        [InlineKeyboardButton(text="Fernet —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", callback_data="encrypt_fernet")]
    ])
    return keyboard

def get_decryption_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Base64 —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞", callback_data="decrypt_base64")],
        [InlineKeyboardButton(text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è", callback_data="decrypt_caesar")],
        [InlineKeyboardButton(text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —à–∏—Ñ—Ä–∞ –í–∏–∂–µ–Ω–µ—Ä–∞", callback_data="decrypt_vigenere")],
        [InlineKeyboardButton(text="–ë–∏–Ω–∞—Ä–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞", callback_data="decrypt_binary")],
        [InlineKeyboardButton(text="Fernet —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞", callback_data="decrypt_fernet")]
    ])
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìù /encrypt - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üîì /decrypt - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

@dp.message(Command("info"))
async def cmd_start(message: types.Message):
    await message.answer(
        """–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–µ—Ç–æ–¥–∞—Ö —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è?–°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É.
        =======================================================================================================================
        1)Base64‚Äì —Å–ø–æ—Å–æ–± –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –¥–≤–æ–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ ASCII —Ç–µ–∫—Å—Ç.
        –ü–æ —Å–≤–æ–µ–π —Å—É—Ç–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–µ. –ö–∞–∂–¥—ã–µ —à–µ—Å—Ç—å –±–∏—Ç –Ω–∞ –≤—Ö–æ–¥–µ –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ 64-–±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
        ‚Äú–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π‚Äù –∞–ª—Ñ–∞–≤–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‚Äì —ç—Ç–æ. A-Z, a-z, 0-9, +, / –∏= –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–æ–ª–Ω—è—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –∫–æ–Ω—Ü–µ.
        –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –Ω–∞ –∫–∞–∂–¥—ã–µ 3 –±–∞–π—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è 4 —Å–∏–º–≤–æ–ª–∞.
        =======================================================================================================================
        2)–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö –∏ —Å—Ç–∞—Ä–µ–π—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. 
        –û–Ω –±—ã–ª –Ω–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å —Ä–∏–º—Å–∫–æ–≥–æ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Æ–ª–∏—è –¶–µ–∑–∞—Ä—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –µ–≥–æ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏.
        –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —à–∏—Ñ—Ä–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É. 
        –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–¥–≤–∏–≥ —Ä–∞–≤–µ–Ω 3, —Ç–æ –±—É–∫–≤–∞ ¬´–ê¬ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ¬´–ì¬ª, ¬´–ë¬ª ‚Äî ¬´–î¬ª –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
        =======================================================================================================================
        3)–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞ ‚Äî –º–µ—Ç–æ–¥ –ø–æ–ª–∏–∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞. 
        –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞. 
        –•–æ—Ç—è —à–∏—Ñ—Ä –ª–µ–≥–∫–æ –ø–æ–Ω—è—Ç—å –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —Ç—Ä–µ—Ö —Å—Ç–æ–ª–µ—Ç–∏–π –æ–Ω –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–ª –≤—Å–µ–º –ø–æ–ø—ã—Ç–∫–∞–º –µ–≥–æ —Å–ª–æ–º–∞—Ç—å. 
        –®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞ —Ä–∞–∑–º—ã–≤–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–∞—Å—Ç–æ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Å—Ç–∞—é—Ç—Å—è.
        =======================================================================================================================
        4)–®–∏—Ñ—Ä –í–µ—Ä–Ω–∞–º–∞ (XOR-—à–∏—Ñ—Ä) ‚Äî –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –≠—Ç–æ –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —à–∏—Ñ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–Ω–∞—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –æ–±–ª–∞–¥–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–π–∫–æ—Å—Ç—å—é.
        –ü—Ä–æ—Ü–µ—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:
        –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∞—é—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ. 
        –í–≤–æ–¥—è—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ –∫–ª—é—á —Ç–∞–∫–æ–π –∂–µ –¥–ª–∏–Ω—ã. 
        –ü–µ—Ä–µ–≤–æ–¥—è—Ç –∫–∞–∂–¥—É—é –±—É–∫–≤—É –≤ –µ—ë –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥ –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Ñ–æ—Ä–º—É–ª—É —Å–æ–æ–±—â–µ–Ω–∏–µ XOR –∫–ª—é—á. 
        =======================================================================================================================
        5)Fernet ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö. –û–Ω —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Python. 
        –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã: –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Fernet –Ω–∞ –≤—Ö–æ–¥–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç, –∫–ª—é—á –∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞, –∞ –∑–∞—Ç–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–∫–µ–Ω. 
        –¢–æ–∫–µ–Ω –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–ª—é—á–∞. 
        """
    )

@dp.message(Command("encrypt"))
async def cmd_encrypt(message: types.Message):
    user_states[message.from_user.id] = "waiting_for_encrypt_text"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å:")

@dp.message(Command("decrypt"))
async def cmd_decrypt(message: types.Message):
    user_states[message.from_user.id] = "waiting_for_decrypt_text"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å:")

@dp.message(F.text)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        return

    state = user_states[user_id]
    if state == "waiting_for_encrypt_text":
        encrypted_messages[user_id] = message.text
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_encryption_keyboard())
    elif state == "waiting_for_decrypt_text":
        encrypted_messages[user_id] = message.text
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:", reply_markup=get_decryption_keyboard())

@dp.callback_query()
async def handle_encryption_choice(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    text = encrypted_messages.get(user_id, "")
    method = callback.data

    result = ""
    if method == "encrypt_base64":
        result = base64.b64encode(text.encode()).decode()
    elif method == "decrypt_base64":
        try:
            result = base64.b64decode(text.encode()).decode()
        except:
            result = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Base64"

    elif method == "encrypt_caesar":
        result = encrypt_caesar(text)
    elif method == "decrypt_caesar":
        result = decrypt_caesar(text)

    elif method == "encrypt_vigenere":
        result = encrypt_vigenere(text, "–ö–õ–Æ–ß")
    elif method == "decrypt_vigenere":
        result = decrypt_vigenere(text, "–ö–õ–Æ–ß")

    elif method == "encrypt_binary":
        result = ' '.join(format(ord(c), '08b') for c in text)
    elif method == "decrypt_binary":
        try:
            result = ''.join(chr(int(b, 2)) for b in text.split())
        except:
            result = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"

    elif method == "encrypt_fernet":
        result = fernet.encrypt(text.encode()).decode()
    elif method == "decrypt_fernet":
        try:
            result = fernet.decrypt(text.encode()).decode()
        except:
            result = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Fernet —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"

    await callback.message.answer(
        f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        f"{'='*30}\n"
        f"{result}\n"
        f"{'='*30}"
    )
    await callback.answer()

    if user_id in user_states:
        del user_states[user_id]
    if user_id in encrypted_messages:
        del encrypted_messages[user_id]

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
